// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  phone         String?   @unique
  phoneVerified DateTime?
  image         String?
  password      String?
  firstName     String?
  lastName      String?
  birthDate     DateTime?
  isVerified    Boolean   @default(false)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  userDomes     UserDome[]
  verifications Verification[]
  messages      Message[]
  receivedMessages Message[] @relation("MessageRecipient")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  location    String?
  occupation  String?
  education   String?
  interests   String[]
  photos      String[]
  isComplete  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Dome {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  color       String
  iconColor   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userDomes UserDome[]
  messages  Message[]
}

model UserDome {
  id        String   @id @default(cuid())
  userId    String
  domeId    String
  joinedAt  DateTime @default(now())
  isActive  Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  dome Dome @relation(fields: [domeId], references: [id], onDelete: Cascade)

  @@unique([userId, domeId])
}

model Verification {
  id           String   @id @default(cuid())
  userId       String
  type         String   // "id", "selfie", "email", "phone"
  status       String   @default("pending") // "pending", "approved", "rejected"
  documentUrl  String?
  metadata     Json?
  verifiedAt   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  senderId  String
  recipientId String
  domeId    String?
  content   String
  type      String   @default("text") // "text", "image", "file"
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender    User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
  recipient User   @relation("MessageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  dome      Dome?  @relation(fields: [domeId], references: [id], onDelete: Cascade)
}
